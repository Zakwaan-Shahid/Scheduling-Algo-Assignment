class process:
    def __init__(self):
        self.name = ''
        self.burst_time = -1
        self.arrival_time = -1
        self.dep = -1
        self.exe_left = -1
        self.input = -1
        self.input_left = -1
        self.take_input = -1
        self.waiting_time = -1
        self.waiting_time_left = -1
        self.quantum_time = -1


def time_increment(time):
    t=0
    for i in range(10000):
        t=0
    time+=1
    return time



class process_queue:

    def __init__(self):
        self.max_size = 100
        self.data = [process() for i in range(100)]
        self.front = -1
        self.rear = -1
        self.average_waiting_time = 0
        self.average_turnaround_time = 0


    def enqueue(self,x):
        self.rear = (self.rear + 1) % self.max_size
        self.data[self.rear] = x
        if self.front == -1:
            self.front = 0

    def dequeue(self):
        if self.front == -1:
            print"Queue Is Empty...\n"
        elif self.front != self.rear:
            temp0 = self.front
            self.front = (self.front + 1) % self.max_size
            return self.data[temp0]
        else:
            temp1 = self.front
            self.front = -1
            self.rear = -1
            return self.data[temp1]

    def clear(self):  
        self.front = -1
        self.rear = -1


    def is_empty(self):
        return self.front == -1

    def decrement(self,time):
        if self.is_empty():
            return

        while self.front <= self.rear:
            if self.data[self.front].exe_left == 0:
                print str(self.data[self.front].name).center(6),str(self.data[self.front].arrival_time).center(14),str(self.data[self.front].burst_time).center(12),str(self.data[self.front].dep-self.data[self.front].burst_time-self.data[self.front].arrival_time).center(14),str(self.data[self.front].dep-self.data[self.front].arrival_time).center(17)
                self.average_waiting_time += self.data[self.front].dep - self.data[self.front].arrival_time - self.data[self.front].burst_time
                self.average_turnaround_time += self.data[self.front].dep - self.data[self.front].arrival_time

                if self.front != self.rear:
                    self.front += 1
                else:
                    self.front = -1
                    self.rear = -1
            else:
                self.data[self.front].exe_left -= 1
                self.data[self.front].quantum_time -= 1
                if self.data[self.front].take_input > 0:
                    self.data[self.front].input_left -= 1
                if self.data[self.front].exe_left == 0:
                    self.data[self.front].dep = time + 1
                return




time = 0
auxiliary_queue = process_queue()
ready_queue = process_queue()
new_queue = [process() for i in range(100)]
waiting_queue = [process() for i1 in range(100)]

no_of_process = input("Enter Number of Process : ")
quantum = input("Enter The Quantum Time : ")

for i in range(no_of_process):
    new_queue[i].name = raw_input("Enter Name : ")
    new_queue[i].arrival_time = input("Enter Arrival Time : ")
    new_queue[i].burst_time = input("Enter Burst Time : ")
    new_queue[i].take_input = input("Is the Process Takes Input (0/1): ")
    if new_queue[i].take_input:
        new_queue[i].input = input("Enter The Time After Which The Process goes for Input : ")
        new_queue[i].waiting_time = input("How Much Time It Will Spend in Waiting Queue : ")
    else:
        new_queue[i].input = -1
    new_queue[i].exe_left = new_queue[i].burst_time
    new_queue[i].input_left = new_queue[i].input
    new_queue[i].name = i
    new_queue[i].quantum_time = quantum

print ' Name ',' Arrival Time ',' Burst Time ',' Waiting Time ',' TurnAround Time '

count = 0
no_of_processes_in_waiting_queue = 0

while (count != no_of_process) or  (not ready_queue.is_empty()) or (no_of_processes_in_waiting_queue > 0) or (not auxiliary_queue.is_empty()):             # Checking That if All Queues Are empty just stop
    for i in range(no_of_process):
        if new_queue[i].arrival_time == time:
            ready_queue.enqueue(new_queue[i])
            count += 1
    for i in range(no_of_processes_in_waiting_queue):
        if waiting_queue[i].waiting_time_left == 0:
            waiting_queue[i].waiting_time_left = -1
            if waiting_queue[i].quantum_time == quantum:
                ready_queue.enqueue(waiting_queue[i])
            else:
                auxiliary_queue.enqueue(waiting_queue[i])
            no_of_processes_in_waiting_queue -= 1
            for i2 in range(i , no_of_processes_in_waiting_queue):
                waiting_queue[i2] = waiting_queue[i2+1]

    if not auxiliary_queue.is_empty():
        if auxiliary_queue.data[auxiliary_queue.front].quantum_time == 0 and auxiliary_queue.data[auxiliary_queue.front].exe_left != 0 and auxiliary_queue.data[auxiliary_queue.front].input_left != 0:
            temp = auxiliary_queue.dequeue()
            temp.quantum_time = quantum
            ready_queue.enqueue(temp)

    if ready_queue.data[ready_queue.front].quantum_time == 0 and ready_queue.data[ready_queue.front].exe_left != 0 and ready_queue.data[ready_queue.front].input_left != 0:
        temp = ready_queue.dequeue()
        temp.quantum_time = quantum
        ready_queue.enqueue(temp)

    if not auxiliary_queue.is_empty():
        if auxiliary_queue.data[auxiliary_queue.front].take_input > 0:
            if auxiliary_queue.data[auxiliary_queue.front].input_left <= 0 and auxiliary_queue.data[auxiliary_queue.front].exe_left != 0:
                if auxiliary_queue.data[auxiliary_queue.front].waiting_time > 0:
                    waiting_queue[no_of_processes_in_waiting_queue] = auxiliary_queue.dequeue()
                    waiting_queue[no_of_processes_in_waiting_queue].input_left = waiting_queue[no_of_processes_in_waiting_queue].input
                    waiting_queue[no_of_processes_in_waiting_queue].waiting_time_left = waiting_queue[no_of_processes_in_waiting_queue].waiting_time
                    if waiting_queue[no_of_processes_in_waiting_queue].quantum_time == 0:
                        waiting_queue[no_of_processes_in_waiting_queue].quantum_time = quantum
                    no_of_processes_in_waiting_queue += 1

    if not ready_queue.is_empty():
        if ready_queue.data[ready_queue.front].take_input > 0:
            if ready_queue.data[ready_queue.front].input_left <= 0 and ready_queue.data[ready_queue.front].exe_left != 0:
                if ready_queue.data[ready_queue.front].waiting_time > 0:
                    waiting_queue[no_of_processes_in_waiting_queue] = ready_queue.dequeue()
                    waiting_queue[no_of_processes_in_waiting_queue].input_left = waiting_queue[no_of_processes_in_waiting_queue].input              # Again Assigning input time so it can come back for input
                    waiting_queue[no_of_processes_in_waiting_queue].waiting_time_left = waiting_queue[no_of_processes_in_waiting_queue].waiting_time
                    if waiting_queue[no_of_processes_in_waiting_queue].quantum_time == 0:
                        waiting_queue[no_of_processes_in_waiting_queue].quantum_time = quantum
                    no_of_processes_in_waiting_queue += 1


    for i in range(no_of_processes_in_waiting_queue):
        waiting_queue[i].waiting_time_left -= 1
    
    if auxiliary_queue.is_empty() or (ready_queue.data[ready_queue.front].quantum_time < quantum  and ready_queue.data[ready_queue.front].exe_left != 0   and not ready_queue.is_empty()):
        if ready_queue.data[ready_queue.front].take_input < 1:
            ready_queue.decrement(time)
        elif ready_queue.data[ready_queue.front].input_left > 0 and ready_queue.data[ready_queue.front].input_left != ready_queue.data[ready_queue.front].input:
            ready_queue.decrement(time)
        else:
            auxiliary_queue.decrement(time)
            if auxiliary_queue.is_empty():
                ready_queue.decrement(time)
    else:
        auxiliary_queue.decrement(time)
        if auxiliary_queue.is_empty():
            ready_queue.decrement(time)
    time = time_increment(time)
    
print "Average Waiting Time = " , ( float (ready_queue.average_waiting_time + auxiliary_queue.average_waiting_time)/ float (no_of_process))
print "Average Turnaround Time = ", ( float (ready_queue.average_turnaround_time + auxiliary_queue.average_turnaround_time)/ float (no_of_process))
